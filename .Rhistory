install.packages("Seurat")
install.packages("Seurat")
library(Seurat)
Seurat::Read10X()
library(tidyverse)
library(Seurat)
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github('satijalab/seurat-data')
library(SeuratData)
library(Seurat)
library(SeuratData)
library(tidyverse)
# ===============================================================
pbmc <- readRDS("T3_vs_MMI_mm10_SNLiu_200421_umap_seprate.rds")
# ===============================================================
pbmc <- readRDS("/Volumes/春晖的移动硬盘/Data_Remain_Merge/T3_vs_MMI_mm10_SNLiu_200421_umap_seprate.rds")
# ===============================================================
pbmc <- readRDS("/Volumes/春晖的移动硬盘/Data_Remain_Merge/seurat-integrate三组结果/T3_vs_MMI_mm10_SNLiu_200421_umap_seprate.rds")
# ===============================================================
pbmc <- readRDS("/Volumes/春晖的移动硬盘/Data_Remain_Merge/数据//T3_vs_MMI_mm10_SNLiu_200421_umap_seprate.rds")
DimPlot(object = pbmc, reduction = "umap", group.by = "orig.ident")
DimPlot(object = pbmc, reduction = "umap")
pbmc <- RunUMAP(pbmc, dims = 1:30, reduction = "pca", return.model = TRUE)
DimPlot(object = pbmc, reduction = "umap", group.by = "orig.ident")
DimPlot(object = pbmc, reduction = "umap")
DimPlot(object = pbmc, reduction = "umap", group.by = "orig.ident")
ggsave("/Users/chunhui/Desktop/T3_vs_MMI.orig.png", width = 10, height = 8)
DimPlot(object = pbmc, reduction = "umap")
ggsave("/Users/chunhui/Desktop/T3_vs_MMI.umap.png", width = 10, height = 8)
# ===============================================================readin new data
fh <- Read10X("/Volumes/春晖的移动硬盘/Data_Remain_Merge/数据/SAMPLE3 (4H)/filtered_feature_bc_matrix/")
se <- CreateSeuratObject(counts = fh,
project = "4H")
# mito
se[["percent.mt"]] <- PercentageFeatureSet(se, pattern = "^mt-")
# median + 3 std
mito_threshold <- median(se$percent.mt) + 3 * sd(se$percent.mt)
se <- subset(se, percent.mt < mito_threshold)
# doublet
se[["doublet"]] <- se$nFeature_RNA / se$nCount_RNA
se <- subset(se, doublet > 0.15)
# abnormal cell
low_threshold <- mean(se$nCount_RNA) - 3* sd(se$nCount_RNA)
high_threshold <- mean(se$nCount_RNA) + 3 * sd(se$nCount_RNA)
se <- subset(se, nCount_RNA > low_threshold &
nCount_RNA < high_threshold)
se <- NormalizeData(se, verbose = FALSE)
se <- FindVariableFeatures(se, selection.method = "vst", nfeatures = 2000, verbose = FALSE)
pancreas.anchors <- FindTransferAnchors(reference = pbmc, query = se, features = se@assays$RNA@var.features,
dims = 1:30, reference.reduction = "pca")
pancreas.query <- MapQuery(anchorset = pancreas.anchors, reference = pbmc, query = se,
reference.reduction = "pca", reduction.model = "umap")
DimPlot(pbmc, reduction = "umap", group.by = "orig.ident", label = TRUE, label.size = 3,
repel = TRUE) + NoLegend() + ggtitle("Reference annotations")
DimPlot(pbmc, reduction = "umap", group.by = "orig.ident", label = TRUE, label.size = 3,
repel = TRUE) + ggtitle("Reference annotations")
DimPlot(pbmc, reduction = "umap", group.by = "orig.ident")
DimPlot(pancreas.query, reduction = "ref.umap") + NoLegend() + ggtitle("Query transferred labels")
DimPlot(pancreas.query, reduction = "ref.umap", group.by = "org.ident")
DimPlot(pancreas.query, reduction = "ref.umap", group.by = "orig.ident")
result <- merge(pbmc, pancreas.query)
DimPlot(result, reduction = "ref.umap", group.by = "orig.ident")
DimPlot(result, reduction = "umap", group.by = "orig.ident")
result@assays
result@reductions
install.packages("ggpval")
library(ggpval)
library(data.table)
install.packages("data.table")
library(ggpval)
library(data.table)
library(ggplot2)
A <- rnorm(200, 0, 3)
B <- rnorm(200, 2, 4)
G <- rep(c("G1", "G2"), each = 100)
dt <- data.table(A, B, G)
dt <- melt(dt, id.vars = "G")
dt
dt <- data.table(A, B, G)
dt
dt <- melt(dt, id.vars = "G")
dt
dt[, mu := mean(value),
by = c("G", "variable")]
dt
dt <- data.table(A, B, G)
dt
dt %>% dplyr::group_by(c("G", "variable"))
library(tidyverse)
dt %>% dplyr::group_by(c("G", "variable"))
dt %>% dplyr::group_by("G")
dt %>% dplyr::group_by(G)
dt %>% dplyr::group_by(G) %>% dplyr::mutate(mean = mean(variable))
dt <- data.table(A, B, G)
dt <- melt(dt, id.vars = "G")
dt
dt %>% dplyr::group_by(G) %>% dplyr::mutate(mean = mean(variable))
dt %>% dplyr::group_by(G) %>% dplyr::mutate(mean = mean(value))
dt %>% dplyr::group_by(variable) %>% dplyr::mutate(mean = mean(value))
dt[, mu := mean(value),
by = c("G", "variable")]
dt
dt %>% dplyr::group_by(variable) %>% dplyr::mutate(mean = mean(value))
table(dt$variable)
dt <- data.table(A, B, G)
dt <- melt(dt, id.vars = "G")
dt
dt %>% dplyr::group_by(variable) %>% dplyr::mutate(mean = mean(value))
BiocManager::install("DESeq2")
BiocManager::install("BiocParallel")
.Library
.libPaths()
library(tidyverse)
R_system_version()
Sys.getenv()
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
R --version
version()
version
library(tidyverse)
BiocManager::install("Deseq2")
BiocManager::install("Deseq2")
git
num <- c(1:9)
num <- c(1:9)
str <- c("abc", "def", "gh", "ijk", "l")
num <- c(1:5)
str <- c("abc", "def", "gh", "ijk", "l")
data.frame(num, str)
row_data <- data.frame(num, str)
input_num <- c(2, 3)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
filter
str_filter <- filter$str
library(tidyverse)
list_x <- str_split_fixed(str_filter)
list_x <- str_split_fixed(str_filter, pattern = "")
list_x <- strsplit(str_filter, pattern = "")
list_x <- strsplit(str_filter, split = "")
list_x
list <- strsplit(str_filter, split = "")
list_x <- list[[1]]
list_y <- list[[2]]
list <- NULL
lapply(list_x , name <- function(n) {n*list_y})
lapply(list_x , name <- function(n) {n*list_y})
lapply(list_x , name <- function(n) {paste0(n, list_y)})
row_data
lapply(list_x , name <- function(n) {paste0(n, list_y)})
input_num <- c(3, 3, 3, 3)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
list <- strsplit(str_filter, split = "")
list
list[1])
list[1]
unlist(list)
matrix(unlist(list), ncol = length(input_num))
x <- matrix[1,]
y <- matrix[,1]
matrix
matrix_filter <- matrix(unlist(list), ncol = length(input_num))
x <- matrix_filter[1,]
y <- matrix_filter[,1]
list <- NULL
lapply(x , name <- function(n) {n*y})
lapply(x , name <- function(n) {paste0(x[n], "y")})
lapply(x , name <- function(n) {paste0(x[n], y)})
x
apply(x , name <- function(n) {paste0(x[n], y)})
x <- as.list(matrix_filter[1,])
x
x <- as.list(matrix_filter[1,])
y <- as.list(matrix_filter[,1])
list <- NULL
lapply(x , name <- function(n) {paste0(x[n], y)})
lapply(x , name <- function(n) {paste0(x[[n]], y)})
paste0(x[[1], y[[1]]])
paste0(x[[1]], y[[1]]])
paste0(x[1], y[1])
lapply(x , name <- function(n) {paste0(x[n], y)})
lapply(x , name <- function(n) {paste0(n, y)})
input_num <- c(3, 3, 3, 3)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
list <- strsplit(str_filter, split = "")
matrix_filter <- matrix(unlist(list), ncol = length(input_num))
x <- as.list(matrix_filter[1,])
y <- as.list(matrix_filter[,1])
list <- NULL
lapply(x , name <- function(n) {paste0(n, y)})
list
input_num <- c(3, 3, 3, 3)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
filter
str_filter <- filter$str
list <- strsplit(str_filter, split = "")
list
matrix_filter <- matrix(unlist(list), ncol = length(input_num))
x <- as.list(matrix_filter[1,])
y <- as.list(matrix_filter[,1])
list_filter <- NULL
lapply(x , name <- function(n) {paste0(n, y)})
list
matrix_filter <- matrix(unlist(list), ncol = 2)
x <- as.list(matrix_filter[1,])
y <- as.list(matrix_filter[,1])
list_filter <- NULL
lapply(x , name <- function(n) {paste0(n, y)})
list
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
x <- as.character(list)
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
x <- as.character(list)
y <-as.character(list)
lapply(x , name <- function(n) {paste0(n, y)})
list
as.character(list)
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
x <- as.character(unlist(list))
y <- as.character(unlist(list))
list_filter <- NULL
lapply(x , name <- function(n) {paste0(n, y)})
lapply(x, lapply(x , name <- function(n) {paste0(n, y)}))
lapply(x , name <- function(n) {paste0(n, lapply(m, function(m) {
y
}))
})
list_filter <- NULL
lapply(x , name <- function(n) {paste0(n, lapply(y, function(m) {
y
}))
})
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
x <- as.character(unlist(list))
y <- as.character(unlist(list))
list_filter <- NULL
lapply(x , name <- function(n) {paste0(n, lapply(y, function(m) {
y
}))
})
lapply(x , name <- function(n) {paste0(n, y)})
length(list)
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in length(list)) {
assign(paste0("list_", list_num), as.character(unlist(list)))
}
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(list)) {
assign(paste0("list_", list_num), as.character(unlist(list)))
}
ls("list_")
ls("list_*")
ls("^list")
ls("^list*")
for (list_num in 1:length(list)) {
lapply(list_1 , name <- function(n) {paste0(n, list_2)})
}
for (list_num in 1:length(list)) {
res <- lapply(list_1 , name <- function(n) {paste0(n, list_2)})
return(res)
}
res
res <- list_1
for (list_num in 1:length(list)) {
res <- lapply(res, name <- function(n) {paste0(n, get(paste0("list_", list_num)))})
return(res)
}
res
res <- list_1
for (list_num in 1:length(list)) {
res <- lapply(res, name <- function(n) {paste0(n, get(paste0("list_", list_num)))})
}
View(res)
res
res <- list_1
for (list_num in 1:length(list)) {
res <- lapply(res, name <- function(n) {paste0(n, get(paste0("list_", list_num+1)))})
}
res
res <- list_1
for (list_num in 1:length(list)) {
res <- lapply(res, function(n) {paste0(n, get(paste0("list_", list_num + 1)))})
}
res
res <- list_1
for (list_num in 2:length(list)) {
res <- lapply(res, function(n) {paste0(n, get(paste0("list_", list_num)))})
}
res
input_num <- c(3, 3, 3, 1)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
list <- strsplit(str_filter, split = "")
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(list)) {
assign(paste0("list_", list_num), as.character(unlist(list)))
}
res <- list_1
for (list_num in 2:length(list)) {
res <- lapply(res, function(n) {paste0(n, get(paste0("list_", list_num)))})
}
res
get(paste0("list_", list_num))
paste0(list_1, list_2)
paste0(paste0(list_1, list_2), list_3)
x <- c(1:10)
y <- c(1:10)
list <- NULL
lapply(x ,function(n) {n*y})
sapply(x ,function(n) {n*y})
tapply(x ,function(n) {n*y})
apply(x ,function(n) {n*y})
lapply(x ,function(n) {n*y})
sapply(x ,function(n) {n*y})
res <- list_1
for (list_num in 2:length(list)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_num)))})
}
res
input_num <- c(3, 3, 3, 1)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
list <- strsplit(str_filter, split = "")
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(list)) {
assign(paste0("list_", list_num), as.character(unlist(list)))
}
res <- list_1
list
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(list)) {
assign(paste0("list_", list_num), as.character(unlist(list)))
}
str_filter
input_num <- c(3, 3, 3, 1)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(list)) {
assign(paste0("list_", list_num), strsplit(str_filter[list_num], split = ""))
}
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(input_num)) {
assign(paste0("list_", list_num), strsplit(str_filter[list_num], split = ""))
}
View(list_1)
res <- list_1
for (list_num in 2:length(list)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_num)))})
}
res
list_1
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(input_num)) {
assign(paste0("list_", list_num), unlist(strsplit(str_filter[list_num], split = "")))
}
list_1
res <- list_1
for (list_num in 2:length(list)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_num)))})
}
res
list_1
list_2
list_2
list_4
paste0(list_1, list_2)
paste0(list_1, list_2, recycle0 = T)
list_num
res <- list_1
for (list_numb in 2:length(list)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
res
res <- list_1
s.list(res)
as.list(res)
res <- list_1
for (list_numb in 2:length(list)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
for (list_numb in 2) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
get(paste0("list_", list_numb))
res
res <- list_1
for (list_numb in 2:length(input_num)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
for (list_numb in 2:length(1:1)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
res <- list_1
for (list_numb in 2:length(1:1)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
for (list_numb in 2:length(1:2)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
res <- list_1
for (list_numb in 2:length(1:2)) {
res <- lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})
}
res
res <- list_1
for (list_numb in 2:length(1:2)) {
res <- list(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
res
res <- list_1
for (list_numb in 2:length(1:2)) {
res <- unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
res
res <- list_1
for (list_numb in 2:length(1:3)) {
res <- list(unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})))
}
res
res <- list_1
for (list_numb in 2:length(input_num)) {
res <- list(unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))})))
}
res
res <- list_1
for (list_numb in 2:length(input_num)) {
res <- unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
res
res <- list_1
for (list_numb in 2:length(input_num)) {
res <- (lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
res
res <- list_1
for (list_numb in 2:length(input_num)) {
res <- unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
res
res <- list_1
for (list_numb in 2:(length(input_num)-1) {
}
res <- list_1
for (list_numb in 2:(length(input_num)-1)) {
res <- unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
res
appy(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
lappy(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
lapply(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
input_num <- c(3, 3, 3, 1, 2)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(input_num)) {
assign(paste0("list_", list_num), unlist(strsplit(str_filter[list_num], split = "")))
}
res <- list_1
for (list_numb in 2:(length(input_num)-1)) {
res <- unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
lapply(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
sapply(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
input_num <- c(3, 5, 3, 1, 2)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(input_num)) {
assign(paste0("list_", list_num), unlist(strsplit(str_filter[list_num], split = "")))
}
res <- list_1
for (list_numb in 2:(length(input_num)-1)) {
res <- unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
sapply(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
lapply(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
library(tidyverse)
num <- c(1:5)
str <- c("abc", "def", "gh", "ijk", "l")
row_data <- data.frame(num, str)
input_num <- c(3, 5, 3, 1, 2)
filter <- dplyr::left_join(data.frame(num = input_num), row_data)
str_filter <- filter$str
# matrix_filter <- matrix(unlist(list), ncol = length(input_num))
for (list_num in 1:length(input_num)) {
assign(paste0("list_", list_num), unlist(strsplit(str_filter[list_num], split = "")))
}
res <- list_1
for (list_numb in 2:(length(input_num)-1)) {
res <- unlist(lapply(as.list(res), function(n) {paste0(n, get(paste0("list_", list_numb)))}))
}
lapply(res, function(n) {paste0(n, get(paste0("list_", length(input_num))))})
setwd("~/Documents/OneDrive/Mac_tools/Linux_Shell_Script")
install.packages("book")
install.packages("bookdown")
git
install.packages("rmarkdown")
install.packages("bookdown")
